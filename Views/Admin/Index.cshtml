@model ShandaApp.Models.ViewModels.AdminPreferencesViewModel
@using ShandaApp.Models.Enums
@{
    string moodColor = Model.AIMood switch
    {
        AIMood.Motivational => "text-success",
        AIMood.Friendly => "text-primary",
        AIMood.Professional => "text-dark",
        AIMood.Playful => "text-warning",
        AIMood.Calm => "text-info",
        _ => "text-secondary"
    };
}


@{
    ViewData["Title"] = "Admin Dashboard";
    var avatarUrl = TempData["AvatarUrl"]?.ToString() ?? "/img/avatars/admin/admin-avatar1.png";
    var preferredVoice = TempData["PreferredVoice"]?.ToString() ?? "Google US English Female";
}


<h2 class="text-center">🛠 Admin Control Panel</h2>
<p class="text-center">Welcome, Admin. This section is under construction.</p>
<!-- ✅ Right Side: Admin Control Buttons -->


<div class="text-center mb-4">
   @*  <img src="@Url.Content(avatarUrl)"
         alt="Admin Avatar"
         class="rounded-circle shadow"
         style="width: 100px;" /> *@
    <p class="mt-2 @moodColor">
        Current Mood: <strong>@Model.AIMood</strong>
    </p>
</div>

<form asp-action="UpdateToneAndMood" method="post">
    <div class="form-check mt-3">
        <input class="form-check-input" type="checkbox" asp-for="UseAdminTone" />
        <label class="form-check-label" asp-for="UseAdminTone">Admin</label>
    </div>

    <div class="form-group mt-3">
        <label asp-for="AIMood">SHANDA's Mood</label>
        <select class="form-select" asp-for="AIMood"
                asp-items="Html.GetEnumSelectList<AIMood>()"
                onchange="speakMoodResponse(this.options[this.selectedIndex].text)">
        </select>
    </div>

    <button type="submit" class="btn btn-primary mt-3"
            onclick="this.disabled=true; this.innerHTML='Saving…'; this.form.submit();">
        💾 Save Preferences
    </button>
</form>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
        @TempData["Success"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}



    <!-- ✅ Buttons in a Circular Layout -->
     <div class="d-flex flex-wrap justify-content-center gap-4 mt-4 admin-button-circle">
        <a href="@Url.Action("Index", "ToDo")" class="btn btn-lg btn-primary">Manage Tasks</a>
        <a href="@Url.Action("Business", "Dashboard")" class="btn btn-info dashboard-btn">Business Tools</a>
        <a href="@Url.Action("Users", "Admin")" class="btn btn-lg btn-secondary">Manage Users</a>
        <a href="@Url.Action("Roles", "Admin")" class="btn btn-lg btn-info">Manage Roles</a>
        <a href="@Url.Action("Subscribers", "Admin")" class="btn btn-lg btn-success">Subscribers</a>
        <a href="@Url.Action("Settings", "Admin")" class="btn btn-lg btn-warning">App Settings</a>
        <a href="@Url.Action("Reports", "Admin")" class="btn btn-lg btn-danger">Generate Reports</a>
    </div>



@section Scripts {
    <script>
        const currentMood = "@Model.AIMood";
        const fallbackNames = [
            "Google US English Female",
            "Microsoft Zira Desktop - English (United States)",
            "Google UK English Female",
            "Samantha"
        ];

        function getFemaleVoice() {
            const voices = speechSynthesis.getVoices();

            // Look for preferred female voices first
            for (const name of fallbackNames) {
                const match = voices.find(v => v.name === name);
                if (match) return match;
            }

            // Fallback to first female-like voice
            const femaleGuess = voices.find(v =>
                v.name.toLowerCase().includes("female") ||
                v.name.toLowerCase().includes("zira") ||
                v.name.toLowerCase().includes("samantha")
            );

            return femaleGuess || voices[0]; // absolute fallback
        }

        function speak(text) {
            const synth = window.speechSynthesis;

            const utterance = new SpeechSynthesisUtterance(text);
            utterance.voice = getFemaleVoice();
            utterance.rate = 1;
            utterance.pitch = 1.1;

            synth.cancel();
            synth.speak(utterance);
            console.log("🔊 Voice used:", utterance.voice.name);
        }

        function speakMoodResponse(moodText) {
            const lines = {
                "Neutral": "Greetings, Boss. I'm standing by.",
                "Friendly": "Hey Daddy! So good to see you!",
                "Motivational": "We’ve got this. Let’s crush it today!",
                "Professional": "All systems are operational and aligned, sir.",
                "Playful": "Wanna do something fun while we work?",
                "Calm": "Take a breath. Let’s ease into productivity."
            };

            speak(lines[moodText] || "Mood updated.");
        }

        window.onload = () => {
            if (!speechSynthesis.getVoices().length) {
                speechSynthesis.onvoiceschanged = () => speakMoodResponse(currentMood);
            } else {
                speakMoodResponse(currentMood);
            }
        };
    </script>
}
