@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager


    @using ShandaApp.Models.Enums
@{
    var mood = ViewBag.AIMood?.ToString() ?? "Neutral";
    string moodColor = mood switch
    {
        "Motivational" => "text-success",
        "Friendly" => "text-primary",
        "Professional" => "text-dark",
        "Playful" => "text-warning",
        "Calm" => "text-info",
        _ => "text-secondary"
    };
}


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - SHANDA</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <script src="~/js/tts.js"></script>

</head>
<body>
    <header class="bg-dark text-white p-3">
        <div class="container-fluid d-flex justify-content-between align-items-center">
            <h1 class="mb-0 fw-bold">S.H.A.N.D.A</h1>
            <nav>
                @if (SignInManager.IsSignedIn(User))
                {
                    if (User.IsInRole("Admin"))
                    {
                        <a href="@Url.Action("Index", "Admin")" class="btn btn-outline-light me-2">Admin Panel</a>
                    }
                    <a href="@Url.Action("Index", "Dashboard")" class="btn btn-outline-light me-2">Dashboard</a>
                    <a href="@Url.Action("ChangeAvatar", "Profile")" class="btn btn-outline-warning me-2">Avatar</a>
                    <form method="post" asp-controller="Auth" asp-action="Logout" class="d-inline">
                        <form asp-controller="Auth" asp-action="Logout" method="post" class="d-inline">
                            <button type="submit" class="btn btn-outline-danger ms-2">🚪 Logout</button>
                            @Html.AntiForgeryToken()
                        </form>
                    </form>
                }
                else
                {
                    <a href="@Url.Action("Login", "Auth")" class="btn btn-light">Login</a>
                }
            </nav>
        </div>
    </header>

    <div class="container-fluid mt-4">
        <div class="row">
            <!-- LEFT COLUMN: AI Panel -->
            <div class="col-md-3 text-center border-end">
                <h5 class="fw-bold">SHANDA AI</h5>
                <img src="@Url.Content(ViewBag.AvatarUrl ?? "~/img/avatars/users/default-avatar.png")" class="img-fluid rounded-circle mb-2 shadow" style="max-width: 160px;" alt="AI Avatar" />
                <p class="mt-2 @moodColor">
               @*  <p class="fw-bold text-danger">@Html.Raw(ViewBag.AIResponse ?? "Hello from SHANDA.")</p> *@
                @* <button onclick="speakText('Welcome back to SHANDA.')">Test Voice</button> *@

            </div>

            <!-- RIGHT COLUMN: Main Content -->
            <div class="col-md-9">
                <main role="main" class="pb-3">
                    @RenderBody()
                </main>
            </div>
        </div>
    </div>

    <footer class="bg-light text-center mt-4 p-2 border-top">
        &copy; 2025 - SHANDA Assistant Platform
    </footer>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/tts.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)

    

    
@section Scripts {
    <script>
        const aiResponse = "@ViewBag.AIResponse";
        if (aiResponse?.length > 0) {
            setTimeout(() => speakText(aiResponse), 500);
        }

            const aiResponse = "@ViewBag.AIResponse";
        if (aiResponse && aiResponse.length > 0) {
            setTimeout(() => speakText(aiResponse), 500);
        }

        const currentMood = "@Model.AIMood";
        const fallbackNames = [
            "Google US English Female",
            "Microsoft Zira Desktop - English (United States)",
            "Google UK English Female",
            "Samantha"
        ];

        function getFemaleVoice() {
            const voices = speechSynthesis.getVoices();

            // Look for preferred female voices first
            for (const name of fallbackNames) {
                const match = voices.find(v => v.name === name);
                if (match) return match;
            }

            // Fallback to first female-like voice
            const femaleGuess = voices.find(v =>
                v.name.toLowerCase().includes("female") ||
                v.name.toLowerCase().includes("zira") ||
                v.name.toLowerCase().includes("samantha")
            );

            return femaleGuess || voices[0]; // absolute fallback
        }

        function speak(text) {
            const synth = window.speechSynthesis;

            const utterance = new SpeechSynthesisUtterance(text);
            utterance.voice = getFemaleVoice();
            utterance.rate = 1;
            utterance.pitch = 1.1;

            synth.cancel();
            synth.speak(utterance);
            console.log("🔊 Voice used:", utterance.voice.name);
        }

        function speakMoodResponse(moodText) {
            const lines = {
                "Neutral": "Greetings, Boss. I'm standing by.",
                "Friendly": "Hey Daddy! So good to see you!",
                "Motivational": "We’ve got this. Let’s crush it today!",
                "Professional": "All systems are operational and aligned, sir.",
                "Playful": "Wanna do something fun while we work?",
                "Calm": "Take a breath. Let’s ease into productivity."
            };

            speak(lines[moodText] || "Mood updated.");
        }

        window.onload = () => {
            if (!speechSynthesis.getVoices().length) {
                speechSynthesis.onvoiceschanged = () => speakMoodResponse(currentMood);
            } else {
                speakMoodResponse(currentMood);
            }
        };
    </script>
 }
</body>
</html>
